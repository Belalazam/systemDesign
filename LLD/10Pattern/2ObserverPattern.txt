The Observer Design Pattern is a behavioral pattern that defines a one-to-many dependency between objects so that when one object (the subject) changes its state, all its dependents (observers) are notified and updated automatically.


example->>>>



Example 1: Weather Station
Scenario:
You have a weather station that collects temperature, humidity, and pressure data. Different devices like phones, tablets, and displays want to get updates whenever the weather changes.

Step 1: Create the Observer Interface

public interface Observer {
    void update(float temperature, float humidity, float pressure);
}
Step 2: Create the Subject Interface
java
Copy code
import java.util.ArrayList;
import java.util.List;

public interface Subject {
    void attach(Observer observer);
    void detach(Observer observer);
    void notifyObservers();
}
Step 3: Implement the Concrete Subject

public class WeatherStation implements Subject {
    private List<Observer> observers;
    private float temperature;
    private float humidity;
    private float pressure;

    public WeatherStation() {
        observers = new ArrayList<>();
    }

    @Override
    public void attach(Observer observer) {
        observers.add(observer);
    }

    @Override
    public void detach(Observer observer) {
        observers.remove(observer);
    }

    @Override
    public void notifyObservers() {
        for (Observer observer : observers) {
            observer.update(temperature, humidity, pressure);
        }
    }

    public void setMeasurements(float temperature, float humidity, float pressure) {
        this.temperature = temperature;
        this.humidity = humidity;
        this.pressure = pressure;
        notifyObservers();
    }
}
Step 4: Implement Concrete Observers

public class PhoneDisplay implements Observer {
    private Subject weatherStation;

    public PhoneDisplay(Subject weatherStation) {
        this.weatherStation = weatherStation;
        weatherStation.attach(this);
    }

    @Override
    public void update(float temperature, float humidity, float pressure) {
        System.out.println("Phone Display: Temp = " + temperature + ", Humidity = " + humidity + ", Pressure = " + pressure);
    }
}

public class TabletDisplay implements Observer {
    private Subject weatherStation;

    public TabletDisplay(Subject weatherStation) {
        this.weatherStation = weatherStation;
        weatherStation.attach(this);
    }

    @Override
    public void update(float temperature, float humidity, float pressure) {
        System.out.println("Tablet Display: Temp = " + temperature + ", Humidity = " + humidity + ", Pressure = " + pressure);
    }
}
Step 5: Use the Observer Pattern

public class WeatherStationExample {
    public static void main(String[] args) {
        WeatherStation weatherStation = new WeatherStation();

        PhoneDisplay phoneDisplay = new PhoneDisplay(weatherStation);
        TabletDisplay tabletDisplay = new TabletDisplay(weatherStation);

        weatherStation.setMeasurements(30.4f, 65.0f, 1013.1f);
        weatherStation.setMeasurements(29.2f, 70.0f, 1012.5f);
    }
}
Output:
yaml
Copy code
Phone Display: Temp = 30.4, Humidity = 65.0, Pressure = 1013.1
Tablet Display: Temp = 30.4, Humidity = 65.0, Pressure = 1013.1
Phone Display: Temp = 29.2, Humidity = 70.0, Pressure = 1012.5
Tablet Display: Temp = 29.2, Humidity = 70.0, Pressure = 1012.5


when a mssg is passed , all obeserver gets notified

or

when a message (or state change) is passed from the subject, all registered observers are notified. This is the core idea of the Observer Design Pattern.
