The Strategy Design Pattern is used to define a family of algorithms, encapsulate each one, and make them interchangeable. The pattern lets the algorithm vary independently from clients that use it.


example->

// PaymentStrategy.java
public interface PaymentStrategy {
    void pay(int amount);
}




// CreditCardPayment.java
public class CreditCardPayment implements PaymentStrategy {
    @Override
    public void pay(int amount) {
        System.out.println("Paid " + amount + " using Credit Card.");
    }
}

// PayPalPayment.java
public class PayPalPayment implements PaymentStrategy {
    @Override
    public void pay(int amount) {
        System.out.println("Paid " + amount + " using PayPal.");
    }
}

// GooglePayPayment.java
public class GooglePayPayment implements PaymentStrategy {
    @Override
    public void pay(int amount) {
        System.out.println("Paid " + amount + " using Google Pay.");
    }
}


// PaymentContext.java
public class PaymentContext {
    private PaymentStrategy paymentStrategy;

    // Set the strategy at runtime
    public void setPaymentStrategy(PaymentStrategy paymentStrategy) {
        this.paymentStrategy = paymentStrategy;
    }

    // Use the strategy to pay
    public void payAmount(int amount) {
        paymentStrategy.pay(amount);
    }
}


public class StrategyPatternExample {
    public static void main(String[] args) {
        PaymentContext context = new PaymentContext();

        // Pay using Credit Card
        context.setPaymentStrategy(new CreditCardPayment());
        context.payAmount(100);

        // Pay using PayPal
        context.setPaymentStrategy(new PayPalPayment());
        context.payAmount(200);

        // Pay using Google Pay
        context.setPaymentStrategy(new GooglePayPayment());
        context.payAmount(300);
    }
}








